package dp1;

public class Fibonacci {

	public static int fib(int n) {
		if(n==0 || n==1) {
			return n;
		}
		int a=fib(n-1);
		int b=fib(n-2);
		return(a+b);	
	}

	
	//Memoization method (takes space but reduces time)
	public static int fibM(int n) {
		int arr[]=new int[n+1];
		for(int i=0;i<=n;i++) {
			arr[i]=-1;
		}
		
		return fibM(n,arr);
	}

	public static int fibM(int n ,int storage[]) {
		if(n==0|| n==1) {
			storage[n]=n;
			return storage[n];
		}
		
		if(storage[n]!=-1) {
			return storage[n];
		}
		
		storage[n]=fibM(n-1,storage)+fibM(n-2,storage);
		return (storage[n]);
	}

	public static int fibDP(int n) {
		int storage[]=new int [n+1];
		storage[0]=0;
		storage[1]=1;
		
		for(int i=2;i<=n;i++) {
			storage[i]= storage[i-1]+storage[i-2];	
		}
		
		return storage[n];
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(fibM(400));
		System.out.println(fibDP(400));
		System.out.println(fib(400));

	}

}
