package dp1;

public class MinsquareCount {
	public static int minsqc(int n) {
		if(n==1 || n==0) {
			return n;
		}
		int min=Integer.MAX_VALUE;
		
		for(int i=1;i<=Math.sqrt(n);i++) {
			int count=(minsqc(n-(i*i)));
			if(min>count) {
				min=count;
			}
		}
		return(1+min);
	}
	
	public static int minsqcM(int n) {
		
		int storage[]=new int [n+1];
		return minsqM(n,storage);
		
	}
	
	public static int minsqM(int n,int storage[]) {
		if(n==1 || n==0) {
			storage[n]=n;
			return storage[n];
		}
		int min=Integer.MAX_VALUE;
		
		for(int i=1;i<=Math.sqrt(n);i++) {
			int count=(minsqc(n-(i*i)));
			if(min>count) {
				min=count;
			}
		}
		storage[n]=1+min;
		return(storage[n]);
	}
	
	public static int minsqcDP(int n) {
		int[] storage  = new int[n+1];
		storage[0]=0;
		storage[1] =1;
		for(int i=2;i<=n;i++) {
			int min = Integer.MAX_VALUE;
			for(int j=1;j<=Math.sqrt(i);j++) {
				int count = storage[i-(j*j)];
				if(min > count) {
					min = count;
				}
				
			}
			storage[i] = min + 1;
			
		}
		return storage[n];
		
		
		
		
		
		
	}
	
	
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=10;
		System.out.println(minsqcDP(n));
		System.out.println(minsqcM(n));
		System.out.println(minsqc(n));
	}

}
