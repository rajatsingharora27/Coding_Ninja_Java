package dp2;

import java.util.Arrays;

public class MatrixChainMul {
	public static int mcm(int arr[]) {
		int ei=arr.length-1;
		return mcm(arr,0,ei);

	}

	public static int mcm(int arr[],int si,int ei) {
		if(si==ei || ei-si==1) {
			return 0;
		}


		int min=Integer.MAX_VALUE;

		for(int i=si+1;i<ei;i++) {
			int c= mcm(arr,si,i) + mcm(arr,i,ei) + arr[si]*arr[i]*arr[ei];
			if(c<min) {
				min=c;
			}
		}
		return min;
	}

	public static int mcmMEMO(int arr[]) {
		int ei=arr.length-1;
		int n=arr.length;
		int storage[][]=new int [n+1][n+1];
		for(int [] i:storage ) {
			Arrays.fill(i, -1);
		}

		return mcmMEMO(arr,0,ei,storage);
	}


	private static int mcmMEMO(int[] arr, int si, int ei,int storage[][]) {
		// TODO Auto-generated method stub
		if(si==ei|| ei-si==1) {
			storage[si][ei]=0;
			return storage[si][ei];	
		}

		if(storage[si][ei]!=-1) {
			return storage[si][ei];
		}

		int min=Integer.MAX_VALUE;

		for(int i=si+1;i<ei;i++) {
			int c= mcm(arr,si,i) + mcm(arr,i,ei) + arr[si]*arr[i]*arr[ei];
			if(c<min) {
				min=c;
			}
		}
		storage[si][ei]=min;
		return storage[si][ei];

	}

	public static int mcmDP(int arr[]) {
		int n=arr.length;
		int storage[][]=new int[arr.length][arr.length];
		int l=1;
		for(int i=0; i<n;i++) {
			int k=i;
			int mul=1;
			if(n-l==1) {
				break;
			}
			while(k<=l+1) {
				mul*=arr[k];
				k++;
			}
			storage[i][l]=mul;
			l++;
		}
		
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				System.out.print(storage[i][j]+" ");
			}
			System.out.println();
		}
		return 0;

		}
		
	


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]= {2,3,6,4,5};
		//System.out.println(mcmMEMO(arr));
		System.out.println(mcmDP(arr));
		//System.out.println(mcm(arr));
	}

}
